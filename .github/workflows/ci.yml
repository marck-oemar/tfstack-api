name: Docker Image CI

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Dockerfile-app'
      - 'Dockerfile-worker'      
  pull_request:
    branches: [ main ]

env:
  APP_DOCKER_REPO: elmoenco/tfstack-api-app
  WORKER_DOCKER_REPO: elmoenco/tfstack-api-worker


jobs:

  unittest:
    runs-on: ubuntu-latest
    container: elmoenco/tf_toolbox:latest
    steps:
      - uses: actions/checkout@v2

      - name: python_unittest
        run: |
          pip3 install -r src/requirements.txt
          cd src
          python3 -m unittest discover -v

  semverrelease:
    needs: unittest
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_major_version: ${{ steps.semantic.outputs.new_release_major_version }}
      new_release_minor_version: ${{ steps.semantic.outputs.new_release_minor_version }}
      new_release_patch_version: ${{ steps.semantic.outputs.new_release_patch_version }}
    steps:
      - uses: actions/checkout@v2

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          extra_plugins: |
            @semantic-release/changelog@
            @semantic-release/git

  release_app:
    if: needs.semverrelease.outputs.new_release_published == 'true'
    needs: semverrelease
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
    
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./ 
          file: ./Dockerfile-app
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.APP_DOCKER_REPO }}:${{ needs.semverrelease.outputs.new_release_version }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  release_worker:
    if: needs.semverrelease.outputs.new_release_published == 'true'
    needs: semverrelease
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
    
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./ 
          file: ./Dockerfile-worker
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.WORKER_DOCKER_REPO }}:${{ needs.semverrelease.outputs.new_release_version }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

